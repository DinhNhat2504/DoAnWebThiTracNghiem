@model PagedResult<DoAnWebThiTracNghiem.Models.Subject>
@using DoAnWebThiTracNghiem.ViewModel
@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_layout.cshtml";
}

<div class="content-section">
    <div class="rounded-xl bg-white p-4 shadow-lg sm:p-6">
        <div class="mb-6 flex flex-col justify-between border-b pb-4 sm:flex-row sm:items-center">
            <h3 class="mb-3 text-lg font-semibold text-gray-700 sm:text-xl sm:mb-0">Danh sách môn học</h3>
            <form method="get" class="mb-4 flex flex-col items-center space-x-2 sm:flex-row">
                <input type="text" name="search" value="@Model.Search" placeholder="Tìm kiếm môn học ..." class="w-full rounded border-gray-300 px-3 py-2 focus:border-blue-500 focus:ring-blue-500 sm:w-auto" />
                <button type="submit" class="w-full rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 sm:w-auto">Tìm kiếm</button>
            </form>
        </div>
        <div class="mb-6 flex flex-col items-start justify-between pb-4 sm:flex-row sm:items-center">
            <button onclick="openModal('addModal')"
               class="flex w-full items-center justify-center space-x-2 rounded-lg bg-blue-600 px-5 py-2.5 font-semibold text-white shadow transition duration-200 ease-in-out hover:bg-blue-700 hover:shadow-md sm:w-auto">
                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" />
                </svg>
                <span>Thêm Môn học</span>
            </button>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-4 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase">Tên môn học</th>
                        
                        <th class="px-4 py-3 text-left text-xs font-medium tracking-wider text-gray-500 uppercase">Người tạo</th>
                        
                        <th class="px-4 py-3 text-center text-xs font-medium tracking-wider text-gray-500 uppercase">Hành động</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 bg-white">
                    @foreach (var item in Model.Items)
                    {
                        <tr>
                            <td class="px-4 py-3 text-sm font-medium whitespace-nowrap text-gray-800">@item.Subject_Name</td>
                           
                            <td class="px-4 py-3 text-sm whitespace-nowrap text-gray-600">@item.Creator?.FullName</td>
                            
                           
                            <td class="space-x-2 px-4 py-3 text-center text-sm font-medium whitespace-nowrap">
                                <button type="button" onclick="handleEditSubjectClick(@item.Subject_Id, @(item.Creator?.RoleId ?? 0))" class="p-1 text-blue-600 hover:text-blue-800" title="Sửa">
                                    <svg class="inline h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" />
                                    </svg>
                                </button>
                                <button type="button" onclick="deleteSubject(@item.Subject_Id)" class="p-1 text-red-600 hover:text-red-800" title="Xóa">
                                    <svg class="inline h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" />
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


        <!-- Pagination -->
        <div class="mt-6 flex flex-col items-center justify-between space-y-3 sm:flex-row sm:space-y-0">
            <span class="text-sm text-gray-600">
                Hiển thị trang @Model.PageNumber trên tổng @Model.TotalPages, tổng @Model.TotalItems môn học
            </span>
            <div class="flex space-x-1">
                <a asp-action="Index" asp-route-page="@(Model.PageNumber - 1)" asp-route-search="@Model.Search" class="rounded-md border border-gray-300 bg-white px-3 py-1 text-sm text-gray-600 hover:bg-gray-50 @(Model.PageNumber == 1 ? "pointer-events-none opacity-50" : "")">Trước</a>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <a asp-action="Index" asp-route-page="@i" asp-route-search="@Model.Search"
                       class="rounded-md border px-3 py-1 text-sm @(i == Model.PageNumber ? "bg-blue-600 border-blue-600 text-white hover:bg-blue-700" : "bg-white border-gray-300 text-gray-600 hover:bg-gray-50")">
                        @i
                    </a>
                }
                <a asp-action="Index" asp-route-page="@(Model.PageNumber + 1)" asp-route-search="@Model.Search" class="rounded-md border border-gray-300 bg-white px-3 py-1 text-sm text-gray-600 hover:bg-gray-50 @(Model.PageNumber == Model.TotalPages ? "pointer-events-none opacity-50" : "")">Sau</a>
            </div>
        </div>
        <div id="addModal" class="absolute top-0 left-0 z-50 flex hidden h-full w-full items-center justify-center">
            <div class="relative w-full max-w-lg scale-95 transform rounded-lg bg-white p-6 shadow-lg">
                <h3 class="mb-4 text-xl font-bold">Thêm mới môn học</h3>
                <form asp-action="Create" method="post">
                    <div class="mb-4">
                        <label for="Subject_Name" class="block text-sm font-medium text-gray-700">Tên môn học</label>
                        <input type="text" id="Subject_Name" name="Subject_Name" class="mt-1 w-full rounded border-gray-300 px-3 py-2 shadow-sm focus:border-green-500 focus:ring-green-500" required />
                        <span id="Subject_NameError" class="text-red-500"></span>
                    </div>
                    
                    <div class="flex justify-end gap-2">
                        <button type="button" onclick="closeModal('addModal')" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Hủy</button>
                        <button type="submit" class="rounded bg-green-500 px-4 py-2 text-white hover:bg-green-600">Lưu</button>
                    </div>
                </form>
            </div>
        </div>
        <div id="EditSubjectModal" class="bg-opacity-40 fixed inset-0 z-50 flex hidden items-center justify-center">
            <div class="relative w-full max-w-md rounded-xl bg-white p-6 shadow-lg">
                <button type="button" onclick="closeEditClassModal()" class="absolute top-2 right-2 text-gray-400 hover:text-gray-700">
                    <!-- SVG close -->
                </button>
                <form id="editClassForm">
                    <input type="hidden" name="Subject_Id" id="editSubjectId" />
                    <div class="mb-3">
                        <label class="block text-sm font-medium text-gray-700">Tên môn học</label>
                        <input type="text" name="Subject_Name" id="editSubject_Name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required />
                        <span id="ESubject_NameError" class="text-red-500"></span>
                    </div>
                   
                    <div class="flex justify-end">
                        <button type="button" onclick="closeEditClassModal()" class="mr-2 rounded bg-gray-200 px-4 py-2 text-gray-700 hover:bg-gray-300">Hủy</button>
                        <button type="submit" class="rounded bg-blue-600 px-4 py-2 font-semibold text-white hover:bg-blue-700">Lưu</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function openModal(modalId) {
             document.getElementById(modalId).classList.remove('hidden');
         }

    function closeModal(modalId) {
             document.getElementById(modalId).classList.add('hidden');
         }
    function closeEditClassModal() {
        document.getElementById('EditSubjectModal').classList.add('hidden');
    }
    document.addEventListener('DOMContentLoaded', function () {
        var addUserForm = document.querySelector('#addModal form');
        if (addUserForm) {
            addUserForm.addEventListener('submit', function (e) {
                e.preventDefault();

                // Xóa lỗi cũ
                document.getElementById('Subject_NameError').innerText = '';
                var formData = new FormData(addUserForm);

                  fetch('/Admin/Subjects/Create', {
        method: 'POST',
        body: formData,
        headers: {
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        }
    })
    .then(async res => {
        const data = await res.json();
        if (res.ok && data.success) {
            showAlert(data.message || "Thêm môn học thành công!", "success");
            setTimeout(() => location.reload(), 1200);
        } else {
            if (data.message) {
                showAlert(data.message, "error");
            }
            if (data.errors) {
                if (data.errors.Subject_Name)
                    document.getElementById('Subject_NameError').innerText = data.errors.Subject_Name[0];
            }
        }
    })
    .catch(() => {
        showAlert("Có lỗi xảy ra khi gửi dữ liệu!", "error");
    });
            });
        }
    });
    function handleEditSubjectClick(subjectId, creatorRoleId) {
            let alertText = ( creatorRoleId === 2)? 'Việc môn học của giáo viên này sẽ ảnh hưởng tới lớp học , bài thi và câu hỏi do giáo viên này quản lý. Bạn có chắc muốn sửa?': 'Bạn có chắc muốn sửa môn học này?';

    Swal.fire({
        title: 'Cảnh báo',
        text: alertText,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sửa',
        cancelButtonText: 'Hủy'
    }).then((result) => {
        if (result.isConfirmed) {
            openEditSubjectModal(subjectId)
        }
    });
    }
    function openEditSubjectModal(subjectId) {
       fetch(`/Admin/Subjects/GetSubject?id=${subjectId}`)
            .then(res => res.json())
            .then(cls => {
                document.getElementById('editSubjectId').value = cls.subject_Id;
                document.getElementById('editSubject_Name').value = cls.subject_Name;
                document.getElementById('EditSubjectModal').classList.remove('hidden');
            });
    }
    document.getElementById('EditSubjectModal').addEventListener('submit', function (e) {
        e.preventDefault();
        document.getElementById('ESubject_NameError').innerText = '';
        const form = e.target;
        const formData = new FormData(form);
        fetch('/Admin/Subjects/EditSub', {
            method: 'POST',
            body: formData
        }).then(res => {
            if (res.ok){
                closeEditClassModal()
                showAlert("Cập nhật môn học thành công!", "success");
                setTimeout(() => location.reload(), 1200);}
            else {
            if (data.errors) {
                if (data.errors.Subject_Name)
                    document.getElementById('ESubject_NameError').innerText = data.errors.Subject_Name[0];
               
            }}
        }).catch(() => {
            
        showAlert("Có lỗi xảy ra khi cập nhật!", "error");
    });
    });
    function deleteSubject(subjectId) {

         Swal.fire({
             title: 'Xác nhận xóa',
             text: 'Bạn có chắc chắn muốn xóa lớp học này? Hành động này không thể hoàn tác.',
             icon: 'warning',
             showCancelButton: true,
             confirmButtonText: 'Xóa',
             cancelButtonText: 'Hủy'
         }).then((result) => {
             if (result.isConfirmed) {
                fetch(`/Admin/Subjects/DeleteInline?id=${subjectId}`, { method: 'POST' })
                     .then(res => {
                         if (res.ok) {
                             showAlert("Xóa thành công!", "success");
                             setTimeout(() => location.reload(), 1200);
                         } else {
                             showAlert("Có lỗi xảy ra khi xóa!", "error");
                         }
                     })
                     .catch(() => showAlert("Có lỗi xảy ra khi xóa !", "error"));
             }
         });
     }
    function showAlert(message, type = "success") {

         if (type === "success") {
             Swal.fire({

                     text: message,
                     icon: "success"
                     });
         } else {
                 Swal.fire({
       icon: "error",
       title: "Lỗi",
       text: message,

     });
    }
    }
</script>

