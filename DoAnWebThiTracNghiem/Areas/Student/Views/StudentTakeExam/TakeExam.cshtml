@model DoAnWebThiTracNghiem.Models.Exam
@{
    ViewData["Title"] = "Làm bài thi";
    Layout = "~/Areas/Student/Views/Shared/_Layout.cshtml";
    var questions = ViewData["Questions"] as List<DoAnWebThiTracNghiem.Models.Exam_Question> ?? new List<DoAnWebThiTracNghiem.Models.Exam_Question>();
    var allQuestions = ViewData["AllQuestions"] as List<DoAnWebThiTracNghiem.Models.Exam_Question> ?? new List<DoAnWebThiTracNghiem.Models.Exam_Question>();
    var remainingTime = ViewData["RemainingTime"] as double? ?? 0;
    var currentPage = ViewData["CurrentPage"] as int? ?? 1;
    var totalPages = ViewData["TotalPages"] as int? ?? 1;
    var examId = ViewData["ExamId"] as int? ?? 0;
    var answers = ViewData["Answers"] as Dictionary<int, string> ?? new Dictionary<int, string>();

    // Tạo ánh xạ giữa questionId và index, đồng thời tính trang chứa câu hỏi
    var questionIdToIndex = new Dictionary<int, int>();
    var questionIdToPage = new Dictionary<int, int>();
    int pageSize = 10;
    for (int i = 0; i < allQuestions.Count; i++)
    {
        int questionId = allQuestions[i].Question_ID;
        questionIdToIndex[questionId] = i + 1;
        questionIdToPage[questionId] = (i / pageSize) + 1;
    }
}

<!-- Hiển thị thông báo lỗi nếu có -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="container mx-auto p-4">
        <div class="relative rounded border border-red-400 bg-red-100 px-4 py-3 text-red-700" role="alert">
            <span class="block sm:inline">@TempData["ErrorMessage"]</span>
        </div>
    </div>
}

@if (Model != null)
{
    <header class="bg-indigo-600 p-4 text-white shadow-md">
        <div class="container mx-auto flex flex-col items-center justify-between sm:flex-row">
            <div>
                <h1 class="text-xl font-bold">@Model.Exam_Name</h1>
                <p class="text-sm">Thời gian: @Model.Duration phút | Số câu: @Model.TotalQuestions</p>
            </div>
            <div class="mt-2 text-sm sm:mt-0">
                <p>Thời gian còn lại: <span id="countdown-timer">00:00</span></p>
            </div>
        </div>
    </header>

    <div class="container mx-auto flex flex-1 flex-col gap-6 p-6 md:flex-row">
        <div class="md:w-3/4">
            <form id="examForm" asp-action="SubmitExam" asp-controller="StudentTakeExam" method="post">
                <input type="hidden" name="examId" value="@Model.Exam_ID" />
                @if (questions.Any())
                {
                    int index = (currentPage - 1) * 10 + 1;
                    foreach (var question in questions)
                    {
                        <section id="question-@index" class="mb-6 rounded-lg bg-white p-6 shadow-md">
                            <h2 class="mb-4 text-lg font-semibold text-indigo-600">
                                Câu @index/@Model.TotalQuestions: @question.Question.Question_Content
                            </h2>
                            <div class="space-y-2">
                                @if (question.Question.Options != null && question.Question.Options.Any())
                                {
                                    foreach (var option in question.Question.Options)
                                    {
                                        var isChecked = answers.ContainsKey(question.Question_ID) && answers[question.Question_ID] == option;
                                        <label class="flex items-center">
                                            <input type="radio"
                                                   id="option-@index-@option"
                                                   name="answer-@question.Question_ID"
                                                   value="@option"
                                                   class="mr-2"
                                                   onchange="updateAnswer(@question.Question_ID, '@option')"
                                            @(isChecked ? "checked" : "") />
                                            @option
                                        </label>
                                    }
                                }
                                else
                                {
                                    var answerText = answers.ContainsKey(question.Question_ID) ? answers[question.Question_ID] : "";
                                    <input type="text"
                                           id="answer-@index"
                                           name="answer-@question.Question_ID"
                                           value="@answerText"
                                           class="w-full rounded-lg border p-2"
                                           placeholder="Nhập đáp án của bạn"
                                           oninput="updateAnswer(@question.Question_ID, this.value)" />
                                }
                            </div>
                        </section>
                        index++;
                    }

                    <!-- Nút điều hướng trang với logic lưu đáp án -->
                    <div class="mt-4 flex justify-between">
                        @if (currentPage > 1)
                        {
                            <a href="@Url.Action("TakeExam", new { examId = examId, page = currentPage - 1 })"
                               onclick="saveAllAnswersBeforeRedirect('@Url.Action("TakeExam", new { examId = examId, page = currentPage - 1 })'); return false;"
                               class="rounded bg-indigo-600 px-4 py-2 text-white hover:bg-indigo-700">Trang trước</a>
                        }
                        else
                        {
                            <span class="cursor-not-allowed rounded bg-gray-300 px-4 py-2 text-gray-500">Trang trước</span>
                        }

                        <span class="text-gray-700">Trang @currentPage / @totalPages</span>

                        @if (currentPage < totalPages)
                        {
                            <a href="@Url.Action("TakeExam", new { examId = examId, page = currentPage + 1 })"
                               onclick="saveAllAnswersBeforeRedirect('@Url.Action("TakeExam", new { examId = examId, page = currentPage + 1 })'); return false;"
                               class="rounded bg-indigo-600 px-4 py-2 text-white hover:bg-indigo-700">Trang sau</a>
                        }
                        else
                        {
                            <span class="cursor-not-allowed rounded bg-gray-300 px-4 py-2 text-gray-500">Trang sau</span>
                        }
                    </div>
                }
                else
                {
                    <p class="text-red-500">Không có câu hỏi nào để hiển thị.</p>
                }
            </form>
        </div>

        <div class="md:w-1/4">
            <div class="sticky top-24 rounded-lg bg-white p-4 shadow-md">
                <h3 class="mb-4 text-lg font-semibold text-indigo-600">Điều hướng câu hỏi</h3>
                <div class="grid grid-cols-2 gap-2">
                    @for (int i = 1; i <= allQuestions.Count; i++)
                    {
                        var question = allQuestions[i - 1];
                        var targetPage = questionIdToPage[question.Question_ID];
                        <a href="@Url.Action("TakeExam", new { examId = examId, page = targetPage })#question-@i"
                           id="nav-@i"
                           onclick="saveAllAnswersBeforeRedirect('@Url.Action("TakeExam", new { examId = examId, page = targetPage })#question-@i'); return false;"
                           class="rounded bg-indigo-100 px-3 py-1 text-center text-indigo-600 hover:bg-indigo-200">@i</a>
                    }
                </div>
            </div>
        </div>
    </div>

    <footer class="bg-gray-200 p-4">
        <div class="container mx-auto text-center">
            <button type="submit" form="examForm" id="submit-button" class="rounded-lg bg-green-600 px-6 py-3 text-white hover:bg-green-700">Nộp bài</button>
        </div>
    </footer>
}
else
{
    <div class="container mx-auto p-4">
        <p class="text-red-500">Không thể tải bài thi. Vui lòng thử lại.</p>
    </div>
}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let remainingTime = @Html.Raw(Json.Serialize(ViewData["RemainingTime"]));
        console.log("[TakeExam] Initial Remaining Time: " + remainingTime);

        if (isNaN(remainingTime) || remainingTime <= 0) {
            remainingTime = 40 * 60;
            console.log("[TakeExam] RemainingTime không hợp lệ, đặt mặc định: " + remainingTime);
        }

        const timerElement = document.getElementById('countdown-timer');
        let isSubmitting = false;

        if (timerElement) {
            function updateTimer() {
                if (remainingTime <= 0 && !isSubmitting) {
                    clearInterval(timerInterval);
                    timerElement.textContent = 'Hết giờ!';
                    alert('Thời gian làm bài đã hết!');
                    isSubmitting = true;
                    const examForm = document.getElementById('examForm');
                    if (examForm) examForm.submit();
                    return;
                }

                let minutes = Math.floor(remainingTime / 60);
                let seconds = remainingTime % 60;
                minutes = minutes < 10 ? '0' + minutes : minutes;
                seconds = seconds < 10 ? '0' + seconds : seconds;
                timerElement.textContent = `${minutes}:${seconds}`;
                remainingTime--;
            }

            updateTimer();
            const timerInterval = setInterval(updateTimer, 1000);
        }

        const examForm = document.getElementById('examForm');
        if (examForm) {
            examForm.addEventListener('submit', (event) => {
                const inputs = document.querySelectorAll('input[name^="answer-"]:checked, input[name^="answer-"][type="text"]');
                let hasAnswer = false;
                inputs.forEach(input => {
                    if (input.type === 'radio' && input.checked) {
                        hasAnswer = true;
                    } else if (input.type === 'text' && input.value.trim() !== '') {
                        hasAnswer = true;
                    }
                });

                if (!hasAnswer && !isSubmitting) {
                    event.preventDefault();
                    alert('Vui lòng chọn ít nhất một câu trả lời trước khi nộp bài.');
                }
                isSubmitting = true;
            });
        }

        // Ánh xạ questionId với index
        const questionIdToIndex = @Html.Raw(Json.Serialize(questionIdToIndex));
        const answersFromSession = @Html.Raw(Json.Serialize(answers));

        // Biến để theo dõi đáp án cục bộ
        let localAnswers = { ...answersFromSession };

        // Function to update answer in session
        window.updateAnswer = function(questionId, answer) {
            localAnswers[questionId] = answer;

            fetch('/Student/StudentTakeExam/SaveAnswer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ examId: @examId, questionId: questionId, answer: answer })
            }).then(response => {
                if (response.ok) {
                    console.log(`[TakeExam] Answer saved for question ${questionId}: ${answer}`);
                    const index = questionIdToIndex[questionId];
                    if (index) {
                        updateNavigationColor(index, questionId);
                    }
                } else {
                    console.error(`[TakeExam] Failed to save answer for question ${questionId}, status: ${response.status}, statusText: ${response.statusText}`);
                }
            }).catch(error => {
                console.error("[TakeExam] Error saving answer:", error.message);
            });
        };

        // Function to update navigation button color
        window.updateNavigationColor = function(index, questionId) {
            const navButton = document.getElementById(`nav-${index}`);
            if (!navButton) {
                console.log(`[TakeExam] Navigation button nav-${index} not found`);
                return;
            }

            const hasAnswer = localAnswers[questionId] && localAnswers[questionId].trim() !== '';

            if (hasAnswer) {
                navButton.classList.remove('bg-indigo-100', 'hover:bg-indigo-200');
                navButton.classList.add('bg-green-200', 'hover:bg-green-300');
            } else {
                navButton.classList.remove('bg-green-200', 'hover:bg-green-300');
                navButton.classList.add('bg-indigo-100', 'hover:bg-indigo-200');
            }
        };

        // Function to save all answers before redirecting
        window.saveAllAnswersBeforeRedirect = function(url) {
            const inputs = document.querySelectorAll('input[name^="answer-"]:checked, input[name^="answer-"][type="text"]');
            let savePromises = [];

            inputs.forEach(input => {
                const questionId = parseInt(input.name.replace("answer-", ""));
                let answer = input.type === 'radio' ? input.value : input.value.trim();
                if (answer !== (localAnswers[questionId] || '')) {
                    savePromises.push(new Promise((resolve) => {
                        updateAnswer(questionId, answer);
                        setTimeout(resolve, 100);
                    }));
                }
            });

            Promise.all(savePromises).then(() => {
                window.location.href = url;
            }).catch(error => {
                console.error("[TakeExam] Error saving answers before redirect:", error.message);
                window.location.href = url;
            });
        };

        // Initialize navigation colors based on session answers
        Object.keys(answersFromSession).forEach(questionId => {
            const index = questionIdToIndex[questionId];
            if (index) {
                updateNavigationColor(index, parseInt(questionId));
            }
        });

        // Update navigation colors for current page questions on load
    @if (questions.Any())
    {
        @:let index = @((currentPage - 1) * 10 + 1);
        foreach (var question in questions)
        {
            @:updateNavigationColor(index, @question.Question_ID);
            @:index++;
        }
    }
    });
</script>